{"/":{"title":"northes","content":"\nHi! I'm Reece, I'm a site reliability engineer and musician in Kansas City. This is my little space for writing and thinking about things.","lastmodified":"2023-01-24T03:41:19.726777905Z","tags":null},"/notes/docker":{"title":"Hosting with Docker","content":"\nIf you want to host Quartz on a machine without using a webpage hosting service, it may be easier to [install Docker Compose](https://docs.docker.com/compose/install/) and follow the instructions below than to [install Quartz's dependencies manually](notes/preview%20changes.md).\n## Hosting Quartz Locally\nYou can serve Quartz locally at `http://localhost:1313` with the following script, replacing `/path/to/quartz` with the \nactual path to your Quartz folder.\n\ndocker-compose.yml\n```\nservices:\n  quartz-hugo:\n    image: ghcr.io/jackyzha0/quartz:hugo\n    container_name: quartz-hugo\n    volumes:\n      - /path/to/quartz:/quartz\n    ports:\n      - 1313:1313\n\n    # optional\n    environment:\n      - HUGO_BIND=0.0.0.0\n      - HUGO_BASEURL=http://localhost\n      - HUGO_PORT=1313\n      - HUGO_APPENDPORT=true\n      - HUGO_LIVERELOADPORT=-1\n```\n\nThen run with: `docker-compose up -d` in the same directory as your `docker-compose.yml` file.\n\nWhile the container is running, you can update the `quartz` fork with: `docker exec -it quartz-hugo make update`.\n\n## Exposing Your Container to the Internet\n\n### To Your Public IP Address with Port Forwarding (insecure)\n\nAssuming you are already familiar with [port forwarding](https://en.wikipedia.org/wiki/Port_forwarding) and [setting it up with your router model](https://portforward.com):\n\n1. You should set the environment variable `HUGO_BASEURL=http://your-public-ip` and then start your container.\n2. Set up port forwarding on your router from port `p` to `your-local-ip:1313`.\n3. You should now be able to access Quartz from outside your local network at `http://your-public-ip:p`.\n\nHowever, your HTTP connection will be unencrypted and **this method is not secure**.\n\n### To a Domain using Cloudflare Proxy\n\n1. Port forward 443 (HTTPS) from your machine.\n2. Buy a custom domain (say, `your-domain.com`) from [Cloudflare](https://www.cloudflare.com/products/registrar/). Point a DNS A record from `your-domain.com` to your public IP address and enable the proxy.\n3. Set the environment variables `HUGO_BASEURL=https://your-domain.com`, `HUGO_PORT=443`, and `HUGO_APPENDPORT=false`. Change `1313:1313` to `443:443` for the `ports` in `docker-compose.yml`.\n4. Spin up your Quartz container and enjoy it at `https://your-domain.com`!\n\n### To a Domain using a Reverse Proxy\n\nIf you want to serve more than just Quartz to the internet on this machine (or don't want to use the Cloudflare registrar and proxy), you should follow the steps in the section above (as appropriate) and also set up a reverse proxy, like [Traefik](https://doc.traefik.io/traefik). Be sure to configure your TLS certificates too!\n","lastmodified":"2023-01-24T03:41:19.726777905Z","tags":null},"/tags/evergreen/":{"title":"Evergreen","content":"","lastmodified":"2023-01-24T03:41:19.726777905Z","tags":null},"/tags/fruit/":{"title":"Fruit","content":"","lastmodified":"2023-01-24T03:41:19.726777905Z","tags":null},"/tags/glimmer/":{"title":"Glimmer","content":"","lastmodified":"2023-01-24T03:41:19.726777905Z","tags":null},"/tags/hashtags/":{"title":"hashtags","content":"","lastmodified":"2023-01-24T03:41:19.726777905Z","tags":null},"/tags/hashtags/404":{"title":"404","content":"\nThere wasn't a hashtag associated with this link!","lastmodified":"2023-01-24T03:41:19.726777905Z","tags":null},"/tags/hashtags/test":{"title":"#test","content":"\nThis is just here to test hashtag functionality!\n\nfor good measure, i'll link to [[thoughts/Friendship Bracelets]]","lastmodified":"2023-01-24T03:41:19.726777905Z","tags":null},"/tags/paper/":{"title":"Paper","content":"","lastmodified":"2023-01-24T03:41:19.726777905Z","tags":null},"/tags/sapling/":{"title":"Sapling","content":"","lastmodified":"2023-01-24T03:41:19.726777905Z","tags":null},"/tags/seed/":{"title":"Seed","content":"","lastmodified":"2023-01-24T03:41:19.726777905Z","tags":null},"/tags/technical/":{"title":"Technical","content":"","lastmodified":"2023-01-24T03:41:19.726777905Z","tags":null},"/technical/Precision-Time-Protocol-PTP":{"title":"Precision Time Protocol (PTP)","content":"\n#test\n\n","lastmodified":"2023-01-24T03:41:19.726777905Z","tags":null},"/technical/papers/bronsonMetastableFailuresDistributed2021":{"title":"Metastable failures in distributed systems","content":"\n\u003e [!ABSTRACT] Abstract\n\u003e \n\u003e We describe metastable failures---a failure pattern in distributed systems. Currently, metastable failures manifest themselves as black swan events; they are outliers because nothing in the past points to their possibility, have a severe impact, and are much easier to explain in hindsight than to predict. Although instances of metastable failures can look different at the surface, deeper analysis shows that they can be understood within the same framework. We introduce a framework for thinking about metastable failures, apply it to examples observed during years of operating distributed systems at scale, and survey ad-hoc techniques developed post-factum for making systems resilient to known metastable failures. A systematic approach for building systems that are robust against unknown meta-stable failures remains an open problem.\n\n\n%% Import Date: 2022-12-27T20:09:04.657-06:00 %%\n\ni'm testing another hashtag lol #test","lastmodified":"2023-01-24T03:41:19.726777905Z","tags":null},"/technical/papers/hirschPirouetteHigherorderTyped2022":{"title":"Pirouette: higher-order typed functional choreographies","content":"\n\u003e [!ABSTRACT] Abstract\n\u003e \n\u003e We present Pirouette, a language for typed higher-order functional choreographic programming. Pirouette offers programmers the ability to write a centralized functional program and compile it via endpoint projection into programs for each node in a distributed system. Moreover, Pirouette is defined generically over a (local) language of messages, and lifts guarantees about the message type system to its own. Message type soundness also guarantees deadlock freedom. All of our results are verified in Coq.\n\n\n%% Import Date: 2022-12-27T20:12:49.450-06:00 %%\n\n","lastmodified":"2023-01-24T03:41:19.726777905Z","tags":null},"/technical/papers/kryvenGeneratingKnittingPatterns2013":{"title":"Generating Knitting Patterns from a Sketch: a CSP Approach","content":"\n\u003e [!ABSTRACT] Abstract\n\u003e \n\u003e Graphic patterns in knitting are composed of relatively large pixels and create a picture when seen from a distance, while on close viewing the image falls apart into its constituent stitches. Such patterns are constrained in use of colors due to the nature of the medium and in spacing between pixels as a durability concern and are a challenge to create. This paper shows how to convert an arbitrary linedrawing or photograph to a constraint-compliant Fair-Isle knitting pattern for a programmable knitting machine or a manual knitter by formulating it as a Constraint Satisfaction Problem (CSP). First we generate a constraint-inconsistent starting pixel assignment. Then we produce a perceptually similar constraint compliant solution, by minimizing and randomly distributing pixel flips to preserve gestalt features of the original design. We evaluate ways of generating a starting assignment using thresholding and dithering and of solving the problem using pseudo-random texturing and search: Random Walk, GSAT and Min-Conflict. Two hybrid solutions that achieve an improved design-dependent result are described. To test the algorithms an interactive knitting pattern generator was implemented.\n\n\n%% Import Date: 2022-12-27T20:19:46.586-06:00 %%\n","lastmodified":"2023-01-24T03:41:19.726777905Z","tags":null},"/thoughts/Friendship-Bracelets":{"title":"Friendship Bracelets","content":"\nThe process of turning a pixel design into a friendship bracelet pattern can be thought of as a constraint satisfaction problem[^1]. Also, it's just fun to do!\n\nI spent some time thinking about the problem with friends during my last semester of college and plan to come back to it soon.\n\n\n[^1]: Some interesting related work has been done in the paper [[technical/papers/kryvenGeneratingKnittingPatterns2013|Generating Knitting Patterns from a Sketch]].","lastmodified":"2023-01-24T03:41:19.730777863Z","tags":null},"/thoughts/Metastability":{"title":"Metastability","content":"\nPaper notes at [[technical/papers/bronsonMetastableFailuresDistributed2021|Metastable failures in distributed systems]]\n\n#hashtag #fake #test\n\nnow i'm linking to [[technical/Precision Time Protocol (PTP)]]\n\n","lastmodified":"2023-01-24T03:41:19.730777863Z","tags":null}}